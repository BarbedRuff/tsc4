{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}
forall X -> int is_null (X x) asm "ISNULL";
(int) tlen (tuple t) asm "TLEN";
() recv_internal() {
}

int enc_char(int chr, int shift){
  if ((chr <= 90) & (chr >= 65)) {
    return (chr + shift - 65) % 26 + 65;
  }
  else {
    if ((chr <= 122) & (chr >= 97)){
      return (chr + shift - 97) % 26 + 97;
    }
    else {
      return chr;
    }
  }
}

int dec_char(int chr, int shift){
  if ((chr <= 90) & (chr >= 65)) {
    return (chr - shift - 65) % 26 + 65;
  }
  else {
    if ((chr <= 122) & (chr >= 97)){
      return (chr - shift - 97) % 26 + 97;
    }
    else {
      return chr;
    }
  }
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  int flag = -1;
  tuple stack = null();
  tuple builders = null();
  stack = cons(text, stack);
  while (~ stack.is_null()) {
    slice s = stack~list_next().begin_parse();
    if (flag) {
      s~load_uint(32);
      flag = 0;
      builder inner = begin_cell();
      repeat (32){
        inner~store_uint(0, 1);
      }
      while (~ slice_data_empty?(s)){
        inner~store_uint(enc_char(s~load_uint(8), shift), 8);
      }
      builders = cons(inner, builders);
    }
    else {
      builder inner = begin_cell();
      while (~ slice_data_empty?(s)){
        inner~store_uint(enc_char(s~load_uint(8), shift), 8);
      }
      builders = cons(inner, builders);
    }
    if (s.slice_refs()) {
      stack = cons(s~load_ref(), stack);
    }
  }
  builder ans = builders~list_next();
  while (~ builders.is_null()) {
    builder last = builders~list_next();
    last = last.store_ref(ans.end_cell());
    ans = last;
  }
  return ans.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int flag = -1;
  tuple stack = null();
  tuple builders = null();
  stack = cons(text, stack);
  while (~ stack.is_null()) {
    slice s = stack~list_next().begin_parse();
    if (flag) {
      s~load_uint(32);
      flag = 0;
      builder inner = begin_cell();
      repeat (32){
        inner~store_uint(0, 1);
      }
      while (~ slice_data_empty?(s)){
        inner~store_uint(dec_char(s~load_uint(8), shift), 8);
      }
      builders = cons(inner, builders);
    }
    else {
      builder inner = begin_cell();
      while (~ slice_data_empty?(s)){
        inner~store_uint(dec_char(s~load_uint(8), shift), 8);
      }
      builders = cons(inner, builders);
    }
    if (s.slice_refs()) {
      stack = cons(s~load_ref(), stack);
    }
  }
  builder ans = builders~list_next();
  while (~ builders.is_null()) {
    builder last = builders~list_next();
    last = last.store_ref(ans.end_cell());
    ans = last;
  }
  return ans.end_cell();
}
