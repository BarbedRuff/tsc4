forall X -> int is_null (X x) asm "ISNULL";
() recv_internal() {
}

(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  int flag = -1;
  int exit = -1;
  tuple builders = null();
  slice s = text.begin_parse();
  s~skip_bits(32);
  builder inner = begin_cell();
  inner~store_uint(0, 32);
  while (exit) {
    repeat (slice_bits(s) / 8){
      int chr = s~load_uint(8);
      if ((chr <= 90) & (chr >= 65)) {
        chr = (chr + shift - 65) % 26 + 65;
      }
      else {
        if ((chr <= 122) & (chr >= 97)){
          chr = (chr + shift - 97) % 26 + 97;
        }
      }
      inner~store_uint(chr, 8);
    }
    builders = cons(inner, builders);
    inner = begin_cell();
    if (s.slice_refs()) {
      s = s~load_ref().begin_parse();
    }
    else {
      exit = 0;
    }
  }
  builder ans = builders~list_next();
  while (~ builders.is_null()) {
    ans = builders~list_next().store_ref(ans.end_cell());
  }
  return ans.end_cell();
}

(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int flag = -1;
  int exit = -1;
  tuple builders = null();
  slice s = text.begin_parse();
  s~skip_bits(32);
  builder inner = begin_cell();
  inner~store_uint(0, 32);
  do {
    repeat (slice_bits(s) / 8){
      int chr = s~load_uint(8);
      if ((chr <= 90) & (chr >= 65)) {
        chr = (chr - shift - 65) % 26 + 65;
      }
      else {
        if ((chr <= 122) & (chr >= 97)){
          chr = (chr - shift - 97) % 26 + 97;
        }
      }
      inner~store_uint(chr, 8);
    }
    builders = cons(inner, builders);
    inner = begin_cell();
    if (s.slice_refs()) {
      s = s~load_ref().begin_parse();
    }
    else {
      exit = 0;
    }
  } until (exit == 0)
  builder ans = builders~list_next();
  while (~ builders.is_null()) {
    ans = builders~list_next().store_ref(ans.end_cell());
  }
  return ans.end_cell();
}