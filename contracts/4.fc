(int) tlen (tuple t) asm "TLEN";
() recv_internal() {
}

int enc_char(int chr, int shift){
  if ((chr <= 90) & (chr >= 65)) {
    return (chr + shift - 65) % 26 + 65;
  }
  else {
    if ((chr <= 122) & (chr >= 97)){
      return (chr + shift - 97) % 26 + 97;
    }
    else {
      return chr;
    }
  }
}

int dec_char(int chr, int shift){
  if ((chr <= 90) & (chr >= 65)) {
    return (chr - shift - 65) % 26 + 65;
  }
  else {
    if ((chr <= 122) & (chr >= 97)){
      return (chr - shift - 97) % 26 + 97;
    }
    else {
      return chr;
    }
  }
}


(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  int flag = -1;
  int exit = -1;
  tuple builders = null();
  while (exit) {
    slice s = text.begin_parse();
    builder inner = begin_cell();
    if (flag) {
      s~skip_bits(32);
      flag = 0;
      inner~store_uint(0, 32);
    }
    repeat (slice_bits(s) / 8){
      inner~store_uint(enc_char(s~load_uint(8), shift), 8);
    }
    builders = cons(inner, builders);
    if (s.slice_refs()) {
      text = s~load_ref();
    }
    else {
      exit = 0;
    }
  }
  builder ans = builders~list_next();
  repeat (builders.tlen() - 1) {
    ans = builders~list_next().store_ref(ans.end_cell());
  }
  return ans.end_cell();
}

(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int flag = -1;
  int exit = -1;
  tuple builders = null();
  while (exit) {
    slice s = text.begin_parse();
    builder inner = begin_cell();
    if (flag) {
      s~skip_bits(32);
      flag = 0;
      inner~store_uint(0, 32);
    }
    repeat (slice_bits(s) / 8){
      inner~store_uint(dec_char(s~load_uint(8), shift), 8);
    }
    builders = cons(inner, builders);
    if (s.slice_refs()) {
      text = s~load_ref();
    }
    else {
      exit = 0;
    }
  }
  builder ans = builders~list_next();
  repeat (builders.tlen() - 1) {
    ans = builders~list_next().store_ref(ans.end_cell());
  }
  return ans.end_cell();
}