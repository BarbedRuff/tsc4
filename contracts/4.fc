{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
(int) tlen (tuple t) asm "TLEN";
() recv_internal() {
}

int enc_char(int chr, int shift){
  if (chr <= 90) {
    return ((chr + shift - 65) % 26 + 65);
  }
  else {
    return ((chr + shift - 97) % 26 + 97);
  }
}

int dec_char(int chr, int shift){
  if (chr <= 90) {
    return (chr - shift - 65) % 26 + 65;
  }
  else {
    return (chr - shift - 97) % 26 + 97;
  }
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  int flag = 1; ;; first iteration
  tuple stack = null(); ;; stack
  stack~push_back(text); ;; add text
  tuple cells = null();
  while (~ stack.is_null()) { ;; while recursive stack
    slice s = stack~pop_back().begin_parse(); ;; get slice
    if (flag == 1) {
      s~load_uint(32); flag = 0; ;; delete prefix
    }
    builder inner_cell = begin_cell(); ;; create innner cell
    while (~ slice_data_empty?(s)){
      inner_cell~store_uint(enc_char(s~load_uint(8), shift), 8);
    }
    cells~push_back(inner_cell);
    repeat (s.slice_refs()) {
      stack~push_back(s~load_ref());
    }
  }
  builder ans = cells.at(cells.tlen() - 1);
  int i = cells.tlen() - 2;
  while (i >= 0) {
    builder last = cells.at(i);
    last.store_ref(ans.end_cell());
    ans = last;
    i -= 1;
  }
  return ans.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int flag = 1; ;; first iteration
  tuple stack = null(); ;; stack
  stack~push_back(text); ;; add text
  tuple cells = null();
  while (~ stack.is_null()) { ;; while recursive stack
    slice s = stack~pop_back().begin_parse(); ;; get slice
    if (flag == 1) {
      s~load_uint(32); flag = 0; ;; delete prefix
    }
    builder inner_cell = begin_cell(); ;; create innner cell
    while (~ slice_data_empty?(s)){
      inner_cell~store_uint(dec_char(s~load_uint(8), shift), 8);
    }
    cells~push_back(inner_cell);
    repeat (s.slice_refs()) {
      stack~push_back(s~load_ref());
    }
  }
  builder ans = cells.at(cells.tlen() - 1);
  int i = cells.tlen() - 2;
  while (i >= 0) {
    builder last = cells.at(i);
    last.store_ref(ans.end_cell());
    ans = last;
    i -= 1;
  }
  return ans.end_cell();
}
