() recv_internal() {
}

int enc_char(int chr, int shift){
  if ((chr <= 90) & (chr >= 65)) {
    return (chr + shift - 65) % 26 + 65;
  }
  else {
    if ((chr <= 122) & (chr >= 97)){
      return (chr + shift - 97) % 26 + 97;
    }
    else {
      return chr;
    }
  }
}

int dec_char(int chr, int shift){
  if ((chr <= 90) & (chr >= 65)) {
    return (chr - shift - 65) % 26 + 65;
  }
  else {
    if ((chr <= 122) & (chr >= 97)){
      return (chr - shift - 97) % 26 + 97;
    }
    else {
      return chr;
    }
  }
}

(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return enc(shift, text, -1);
}

(cell) enc(int shift, cell text, int flag) {
  slice s = text.begin_parse();
  builder inner = begin_cell();
  if (flag) {
    s~skip_bits(32);
    flag = 0;
    inner~store_uint(0, 32);
  }
  while (~ slice_data_empty?(s)){
    inner~store_uint(enc_char(s~load_uint(8), shift), 8);
  }
  if (s.slice_refs()){
    inner = inner.store_ref(enc(shift, s~load_ref(), 0));
  }
  return inner.end_cell();
}

(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return dec(shift, text, -1);
}

(cell) dec(int shift, cell text, int flag) {
  slice s = text.begin_parse();
  builder inner = begin_cell();
  if (flag) {
    s~skip_bits(32);
    flag = 0;
    inner~store_uint(0, 32);
  }
  while (~ slice_data_empty?(s)){
    inner~store_uint(dec_char(s~load_uint(8), shift), 8);
  }
  if (s.slice_refs()){
    inner = inner.store_ref(dec(shift, s~load_ref(), 0));
  }
  return inner.end_cell();
}