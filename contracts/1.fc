forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  tuple stack = null();
  stack~push_back(tree);
  do {
    slice kek = stack~pop_back().begin_parse();
    if(kek.slice_hash() == hash){
      return kek~load_ref();
    }
    repeat (kek.slice_refs()) {
      stack~push_back(kek~load_ref());
    }
  } until (stack.is_null()); 
  return begin_cell().end_cell();
}