forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}

(cell) find_branch_by_hash(int hash, cell tree) method_id {
  tuple stack = null();
  stack~push_back(tree);
  while (~ stack.is_null()) {
    slice s = stack~pop_back().begin_parse();
    if(s.slice_hash() == hash){
      if(s.slice_refs()){
        return s;
      }
      else {
        return begin_cell().end_cell();
      }
    }
    repeat (s.slice_refs()) {
      stack~push_back(s~load_ref());
    }
  }
  return begin_cell().end_cell();
}