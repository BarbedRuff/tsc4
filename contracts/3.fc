global tuple builders;
forall X -> int is_null (X x) asm "ISNULL";
int pow2(int x) asm "POW2";
int bits(int number) asm "UBITSIZE";
int min(int x, int y) asm "MIN";

() recv_internal() {
}

(builder) store(int x, builder build, int ln) {
    if(builder_bits(build) + ln > 1023){
        builders = cons(build, builders);
        build = begin_cell();
    }
    build~store_uint(x, ln);
    return build;
}

(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
    int flag_len = bits(flag);
    builder build = begin_cell();
    builders = null();
    int bufer = 0;
    int tostore = 0;
    tuple stack = null();
    stack = cons(linked_list, stack);
    while (~ stack.is_null()) {
        slice s = stack~list_next().begin_parse();
        while (~ slice_data_empty?(s)){
            int slide = (min(s.slice_bits(), (flag_len - bits(bufer))));
            int old_bufer_len = bits(bufer);
            bufer = bufer << slide;
            bufer += s~load_uint(slide);
            if (flag_len == bits(bufer)) {
                if (bufer == flag) {
                    build = store(value, build, bits(value));
                    bufer = 0;
                }
                else {
                    int tmp = bufer - pow2(flag_len - 1);
                    int vl = bufer >> bits(tmp);
                    build = store(vl, build, bits(vl));
                    bufer = bufer - pow2(flag_len - 1);
                }
            }
            else {
                if (bits(bufer) != (old_bufer_len + slide)) {
                  build = store(0, build, ((old_bufer_len + slide) - bits(bufer)));
                }
            }
        }
        if (s.slice_refs()) {
            stack = cons(s~load_ref(), stack);
        }
    }
    if (bufer != 0) {
        build = store(bufer, build, bits(bufer));
    }
    if ((builders.is_null()) | (builder_bits(build) != 0)) {
        builders = cons(build, builders);
    }
    builder ans = builders~list_next();
    while (~ builders.is_null()) {
        ans = builders~list_next().store_ref(ans.end_cell());
    }
    return ans.end_cell();
}